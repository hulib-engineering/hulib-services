generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  unaccent        = "true"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [unaccent, uuid_ossp(map: "uuid-ossp")]
}

model file {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  path            String    @db.VarChar
  stickers        sticker[]
  stories         story[]
  userCoverImages user[]    @relation("UserCoverImage")
  user            user[]
}

model gender {
  id   Int    @id
  name String @db.VarChar
  user user[]
}

model humanBookTopic {
  userId  Int
  topicId Int
  topic   topics @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_topics")
  user    user   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([userId, topicId])
}

model liberTopicOfInterest {
  userId  Int
  topicId Int
  topic   topics @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_topics")
  user    user   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([userId, topicId])
}

model humanBooks {
  id             Int       @id @default(autoincrement())
  userId         Int
  bio            String?   @db.VarChar
  videoUrl       String?   @db.VarChar
  education      String?   @db.VarChar
  educationStart DateTime? @db.Date
  educationEnd   DateTime? @db.Date
  createdAt      DateTime  @default(now()) @db.Timestamp(6)
  updatedAt      DateTime  @default(now()) @db.Timestamp(6)
  user           user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_human_books_user")
}

model role {
  id   Int    @id
  name String @db.VarChar
  user user[]
}

model session {
  id        Int       @id @default(autoincrement())
  hash      String    @db.VarChar
  createdAt DateTime  @default(now()) @db.Time(6)
  updatedAt DateTime  @default(now()) @db.Time(6)
  deletedAt DateTime? @db.Time(6)
  userId    Int?
}

model status {
  id       Int       @id
  name     String    @db.VarChar
  stickers sticker[]
  user     user[]
}

model topics {
  id        Int                    @id @default(autoincrement())
  name      String                 @unique @db.VarChar
  createdAt DateTime               @default(now()) @db.Timestamp(6)
  updatedAt DateTime               @default(now()) @db.Timestamp(6)
  hubers    humanBookTopic[]
  libers    liberTopicOfInterest[]
  stories   storyTopic[]
}

model user {
  id                    Int                    @id @default(autoincrement())
  email                 String?                @db.VarChar
  password              String?                @db.VarChar
  provider              String                 @default("email") @db.VarChar
  socialId              String?                @db.VarChar
  fullName              String?                @db.VarChar
  birthday              String?                @db.VarChar
  createdAt             DateTime               @default(now()) @db.Time(6)
  updatedAt             DateTime               @default(now()) @db.Time(6)
  deletedAt             DateTime?              @db.Time(6)
  genderId              Int?
  roleId                Int?
  statusId              Int?
  approval              String?                @db.VarChar
  photoId               String?                @db.Uuid
  address               String?                @db.VarChar
  parentPhoneNumber     String?                @db.VarChar
  phoneNumber           String?                @db.VarChar
  bio                   String?                @db.VarChar
  videoUrl              String?                @db.VarChar
  education             String?                @db.VarChar
  educationStart        DateTime?              @db.Date
  educationEnd          DateTime?              @db.Date
  coverImageId          String?                @db.Uuid
  chatsReceived         chat[]                 @relation("ChatRecipient")
  chatsSent             chat[]                 @relation("ChatSender")
  feedbackBys           feedback[]             @relation("UserFeedbackBy")
  feedbackTos           feedback[]             @relation("UserFeedbackTo")
  favoritedByUsers      huberFavorite[]        @relation("HuberFavorites")
  favoriteHubers        huberFavorite[]        @relation("UserFavorites")
  humanBookTopic        humanBookTopic[]
  humanBooks            humanBooks[]
  topicsOfInterest      liberTopicOfInterest[]
  messagesAsHumanBook   message[]              @relation("HumanBookRelation")
  messagesAsReader      message[]              @relation("ReaderRelation")
  notificationsReceived notification[]         @relation("RecipientNotification")
  notificationsSent     notification[]         @relation("SenderNotification")
  huberReadingSessions  readingSession[]       @relation("HumanBookRelation")
  readingSession        readingSession[]       @relation("ReaderRelation")
  reportsReceived       report[]               @relation("UserReported")
  reportsGiven          report[]               @relation("UserReports")
  stories               story[]
  storyFavorite         storyFavorite[]
  storyReview           storyReview[]
  timeSlots             timeSlot[]
  coverImage            file?                  @relation("UserCoverImage", fields: [coverImageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gender                gender?                @relation(fields: [genderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  file                  file?                  @relation(fields: [photoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role                  role?                  @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status                status?                @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model story {
  id              Int              @id @default(autoincrement())
  title           String           @db.VarChar
  abstract        String?          @db.VarChar
  coverId         String?          @db.Uuid
  humanBookId     Int
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @default(now()) @db.Timestamp(6)
  publishStatus   Int              @default(1)
  rejectionReason String?
  readingSession  readingSession[]
  cover           file?            @relation(fields: [coverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  humanBook       user             @relation(fields: [humanBookId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  storyFavorite   storyFavorite[]
  storyReview     storyReview[]
  topics          storyTopic[]
}

model storyTopic {
  storyId Int
  topicId Int
  story   story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  topic   topics @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([storyId, topicId])
}

model storyReview {
  id        Int      @id @default(autoincrement())
  rating    Int
  title     String   @db.VarChar
  comment   String   @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  userId    Int
  storyId   Int
  preRating Int?
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_story_review_user")
  story     story    @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model storyFavorite {
  userId    Int
  storyId   Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  story     story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, storyId])
}

model timeSlot {
  id        Int      @id @default(autoincrement())
  dayOfWeek Int
  startTime String   @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  huberId   Int
  huber     user     @relation(fields: [huberId], references: [id])
}

model readingSession {
  id            Int                  @id @default(autoincrement())
  humanBookId   Int
  readerId      Int
  storyId       Int
  note          String?              @db.VarChar(4000)
  preRating     Int                  @default(0)
  rating        Int                  @default(0)
  sessionUrl    String               @db.VarChar(1000)
  recordingUrl  String?              @db.VarChar(500)
  sessionStatus ReadingSessionStatus @default(pending)
  startedAt     DateTime             @default(now()) @db.Timestamp(6)
  startTime     String               @db.VarChar(40)
  endedAt       DateTime             @db.Timestamp(6)
  endTime       String               @db.VarChar(40)
  createdAt     DateTime             @default(now()) @db.Timestamp(6)
  updatedAt     DateTime             @default(now()) @db.Timestamp(6)
  deletedAt     DateTime?
  rejectReason  String?
  messages      message[]            @relation("ReadingSessionMessage")
  humanBook     user                 @relation("HumanBookRelation", fields: [humanBookId], references: [id], onDelete: Cascade)
  reader        user                 @relation("ReaderRelation", fields: [readerId], references: [id], onDelete: Cascade)
  story         story                @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model feedback {
  id           Int       @id @default(autoincrement())
  feedbackById Int?
  feedbackToId Int?
  rating       Float
  preRating    Int?
  content      String?   @db.VarChar(4000)
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?
  feedbackBy   user?     @relation("UserFeedbackBy", fields: [feedbackById], references: [id], onDelete: Cascade)
  feedbackTo   user?     @relation("UserFeedbackTo", fields: [feedbackToId], references: [id], onDelete: Cascade)
}

model message {
  id               Int            @id @default(autoincrement())
  readingSessionId Int
  humanBookId      Int
  readerId         Int
  content          String         @db.VarChar(4000)
  createdAt        DateTime       @default(now()) @db.Timestamp(6)
  updatedAt        DateTime       @default(now()) @db.Timestamp(6)
  deletedAt        DateTime?
  humanBook        user           @relation("HumanBookRelation", fields: [humanBookId], references: [id], onDelete: Cascade)
  reader           user           @relation("ReaderRelation", fields: [readerId], references: [id], onDelete: Cascade)
  readingSession   readingSession @relation("ReadingSessionMessage", fields: [readingSessionId], references: [id], onDelete: Cascade)
}

model notification {
  id              Int              @id @default(autoincrement())
  recipientId     Int
  senderId        Int
  typeId          Int
  seen            Boolean          @default(false)
  relatedEntityId Int?
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @default(now()) @db.Timestamp(6)
  deletedAt       DateTime?
  extraNote       String?
  recipient       user             @relation("RecipientNotification", fields: [recipientId], references: [id])
  sender          user             @relation("SenderNotification", fields: [senderId], references: [id])
  type            notificationType @relation(fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model notificationType {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar
  notification notification[]
}

model chatType {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar
  chat chat[]
}

model sticker {
  id        Int      @id @default(autoincrement())
  name      String
  imageId   String?  @db.Uuid
  category  String?
  statusId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      chat[]
  image     file?    @relation(fields: [imageId], references: [id])
  status    status?  @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model chat {
  id          Int        @id @default(autoincrement())
  senderId    Int
  recipientId Int
  message     String?    @db.VarChar(4000)
  status      chatStatus @default(sent)
  createdAt   DateTime   @default(now()) @db.Timestamp(6)
  updatedAt   DateTime   @default(now()) @db.Timestamp(6)
  deletedAt   DateTime?
  readAt      DateTime?
  stickerId   Int?
  chatTypeId  Int?       @default(1)
  chatType    chatType?  @relation(fields: [chatTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recipient   user       @relation("ChatRecipient", fields: [recipientId], references: [id])
  sender      user       @relation("ChatSender", fields: [senderId], references: [id])
  sticker     sticker?   @relation(fields: [stickerId], references: [id])

  @@index([recipientId, readAt])
}

model report {
  id             Int      @id @default(autoincrement())
  reason         String
  markAsResolved Boolean  @default(false)
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  reporterId     Int
  reportedUserId Int
  reportedUser   user     @relation("UserReported", fields: [reportedUserId], references: [id])
  reporter       user     @relation("UserReports", fields: [reporterId], references: [id])

  @@unique([reporterId, reportedUserId])
}

model huberFavorite {
  userId    Int
  huberId   Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  huber     user     @relation("HuberFavorites", fields: [huberId], references: [id], onDelete: Cascade)
  user      user     @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, huberId])
}

enum ReadingSessionStatus {
  finished
  canceled
  pending
  rejected
  approved
  unInitialized
  missed
}

enum chatStatus {
  sent
  delivered
  read
  deleted
}
